import io.gitlab.arturbosch.detekt.Detekt

plugins {
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.spring"
    id "org.jetbrains.kotlin.plugin.jpa"
    id "io.gitlab.arturbosch.detekt"
    id "jacoco"
    id "org.jetbrains.dokka"
    id "maven-publish"
}

apply plugin: "io.spring.dependency-management"
apply plugin: "maven-publish"

group = "org.darkSolace"
version = "0.0.1-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    implementation Spring.boot.data.jpa
    implementation Spring.boot.security
    implementation Spring.boot.web
    implementation Spring.boot.mail
    implementation Spring.boot.validation
    implementation libs.jjwt.api
    implementation libs.springdoc.openapi.ui
    implementation libs.springdoc.openapi.starter.common

    runtimeOnly libs.org.postgresql.postgresql
    runtimeOnly libs.kotlin.reflect
    runtimeOnly libs.jjwt.impl
    runtimeOnly libs.jjwt.jackson
    annotationProcessor Spring.boot.configurationProcessor
    developmentOnly Spring.boot.devTools

    testImplementation Spring.boot.test
    testImplementation Spring.security.spring_security_test
    testImplementation Testing.junit.jupiter
    testImplementation Testing.junit.jupiter.api
    testImplementation Testing.junit.jupiter.engine
    testImplementation Testing.junit.jupiter.params
    testImplementation libs.junit.platform.commons
    testImplementation libs.junit.platform.engine
    testImplementation libs.junit.jupiter
    testImplementation libs.org.testcontainers.postgresql
    testImplementation libs.httpclient5
    testImplementation libs.greenmail.junit5
    testImplementation KotlinX.coroutines.test
    dokkaHtmlPlugin libs.kotlin.as.java.plugin
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(17)
}

detekt {
    buildUponDefaultConfig = true
    allRules = false
    ignoreFailures = true
}

tasks.withType(Detekt).configureEach {
    reports {
        html.required = true
        xml.required = true
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
    }
}

tasks.register('copyDocs') {
    dependsOn(dokkaGfm)
    delete("${projectDir}/../docs/elysianmuse")
    copy {
        from "${buildDir}/dokka/gfm"
        into "${projectDir}/../docs"
    }
}

test.finalizedBy(jacocoTestReport)
test.finalizedBy(copyDocs)
